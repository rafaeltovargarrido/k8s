apiVersion: apps/v1
kind: Deployment
metadata:
  name: react
  labels:
    app: react
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react
  template:
    metadata:
      labels:
        app: react
    spec:
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config    
        - name: shared-storage
          persistentVolumeClaim:
            claimName: shared-pvc            
      containers:
        - name: react
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d/default.conf  # Override default Nginx config
              subPath: nginx.conf        
            - mountPath: /images  # Path inside the container
              name: shared-storage              
          image: ghcr.io/rafaeltovargarrido/react:latest
          ports:
            - containerPort: 80                 
          env:
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: host 
---
---

apiVersion: v1
kind: Service
metadata:
  name: react
spec:
  type: ClusterIP
  selector:
    app: react
  ports:
  - port: 8080
    targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sprint
  labels:
    app: sprint
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sprint
  template:
    metadata:
      labels:
        app: sprint
    spec:
      containers:
        - name: sprint
          image: ghcr.io/rafaeltovargarrido/sprint:latest
          ports:
            - containerPort: 8181       
          volumeMounts:
          - mountPath: /home  # Path inside the container
            name: shared-storage
      volumes:
      - name: shared-storage
        persistentVolumeClaim:
          claimName: shared-pvc
---

apiVersion: v1
kind: Service
metadata:
  name: sprint
spec:
  type: ClusterIP
  selector:
    app: sprint
  ports:
  - port: 8080
    targetPort: 8181
---

# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
data:
  nginx.conf: |-
    server {
        listen 80;

        location /images {
            root /; # Host path where images are stored
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";        
            autoindex off;
        }

        location / {
            root /usr/share/nginx/html;
            try_files $uri /index.html;
        }

        location /api {
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://sprint:8080;  # Forward /api requests to backend
        }
    }
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
---
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: default
stringData:
  host: redis.redis.svc.cluster.local

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shared-pv
spec:
  capacity:
    storage: 2Gi  # Size of the storage
  accessModes:
    - ReadWriteMany  # Allows multiple pods to read and write
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/shared-files  # Directory on Minikube's host machine
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-pvc
spec:
  storageClassName: ""
  volumeName: shared-pv 
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: img-cronjob
spec:
  schedule: "*/5 * * * *"  # Runs every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: python-cron
            image: cron-image:v1  # Python base image
            volumeMounts:
              - mountPath: /images  # Path inside the container
                name: shared-storage    
          restartPolicy: OnFailure
          volumes:
          - name: shared-storage
            persistentVolumeClaim:
              claimName: shared-pvc
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  volumes:
  - name: shared-storage
    persistentVolumeClaim:
      claimName: shared-pvc
  containers:
  - name: myapp
    image: alpine
    command: ["sh", "-c", "while true; do echo 'Alpine pod is running'; sleep 10; done"]
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    volumeMounts:
      - mountPath: /images  # Path inside the container
        name: shared-storage   
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python
  labels:
    app: python
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python
  template:
    metadata:
      labels:
        app: python
    spec:
      containers:
        - name: python
          image: ghcr.io/rafaeltovargarrido/python:latest
          ports:
            - containerPort: 9090       
          volumeMounts:
          - mountPath: /images  # Path inside the container
            name: shared-storage
      volumes:
      - name: shared-storage
        persistentVolumeClaim:
          claimName: shared-pvc
---

apiVersion: v1
kind: Service
metadata:
  name: python
spec:
  type: ClusterIP
  selector:
    app: python
  ports:
  - port: 80
    targetPort: 9090
---        